<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2015 The MITRE Corporation
      and the MIT Internet Trust Consortium
   
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
   
      http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<mvc:interceptors>
		<!-- Inject the UserInfo into the current context -->
		<bean id="userInfoInterceptor" class="org.mitre.openid.connect.web.UserInfoInterceptor" />
	</mvc:interceptors>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<context:component-scan base-package="org.mitreid.multiparty" />

	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager"/>

	<security:http auto-config="false" use-expressions="true"
		disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint"
		pattern="/**">

		<security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />

		<security:logout />

	</security:http>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/openid_connect_login" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="openIdConnectAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">
		<property name="authoritiesMapper">
			<bean class="org.mitre.openid.connect.client.NamedAdminAuthoritiesMapper">
				<property name="admins" ref="namedAdmins" />
			</bean>
		</property>
	</bean>

	<util:set id="namedAdmins" value-type="org.mitre.openid.connect.client.SubjectIssuerGrantedAuthority">
	</util:set>


	<!-- 
	  -
	  - The authentication filter
	  -	
	  -->
	<bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />

		<property name="issuerService" ref="hybridIssuerService" />
		<property name="serverConfigurationService" ref="dynamicServerConfigurationService" />
		<property name="clientConfigurationService" ref="dynamicClientConfigurationService" />
		<property name="authRequestOptionsService" ref="staticAuthRequestOptionsService" />
		<property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder" />
		
	</bean>



	<!-- 
	  -
	  -	Issuer Services: Determine which identity provider issuer is used.
	  -	
	  -->


	<!--
		Hybrid issuer service. If an issuer is passed in directly with the "iss" parameter, it will use that. If not, it will
		look for an "identifier" parameter to do Webfinger discovery on that. Failing that, it will redirect to the login
		page URL.
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.HybridIssuerService" id="hybridIssuerService">
		<property name="loginPageUrl" value="login" />
		<property name="forceHttps" value="false" /> <!-- this default property forces the webfinger issuer URL to be HTTPS, turn off for development work -->
	</bean>

	<!-- 
		Dynamic server configuration, fetches the server's information using OIDC Discovery.
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.DynamicServerConfigurationService" id="dynamicServerConfigurationService" />
	
	
	
	<!-- 
	  -
	  -	Client Configuration: Determine which client identifier and credentials are used.
	  -
	  -->
	
	
	<!-- 
		Dynamic Client Configuration, uses dynamic client registration. This version stores the registered
	    clients in an in-memory map. To override, add a bean to the registeredClientService property.
	-->

	<bean class="org.mitre.openid.connect.client.service.impl.DynamicRegistrationClientConfigurationService" id="dynamicClientConfigurationService">
		<property name="template">
			<bean class="org.mitre.oauth2.model.RegisteredClient">
				<property name="clientName" value="Multiparty Resource" />
				<property name="scope">
					<set value-type="java.lang.String">
						<value>openid</value>
						<value>email</value>
						<value>address</value>
						<value>profile</value>
						<value>phone</value>
						<value>uma_protection</value>
					</set>
				</property>
				<property name="tokenEndpointAuthMethod" value="SECRET_BASIC" />
				<property name="redirectUris">
					<set>
						<value>http://localhost:8080/multiparty-resource/openid_connect_login</value>
					</set>
				</property>
				<!-- for signed requests -->
				<property name="requestObjectSigningAlg" value="RS256" />
				<property name="jwksUri" value="http://localhost:8080/multiparty-resource/jwk" />
			</bean>
		</property>
		<!-- 
			Registered Client Service. Uncomment this to save dynamically registered clients out to a
			file on disk (indicated by the filename property) or replace this with another implementation
			of RegisteredClientService. This defaults to an in-memory implementation of RegisteredClientService
			which will forget and re-register all clients on restart.
		-->
		<!--
		<property name="registeredClientService">
			<bean class="org.mitre.openid.connect.client.service.impl.JsonFileRegisteredClientService">
				<constructor-arg name="filename" value="/tmp/simple-web-app-clients.json" />
			</bean>
		</property>
		 -->
	</bean>

	<!--
	  -
	  -	Auth request options service: returns the optional components of the request
	  - 
	  -->
	<bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService">
		<property name="options">
			<map>
				<!-- Entries in this map are sent as key-value parameters to the auth request -->
				<!-- 
				<entry key="display" value="page" />
				<entry key="max_age" value="30" />
				<entry key="prompt" value="none" />
				-->
			</map>
		</property>
	</bean>

	<!--
	  -
	  - Authorization URL Builders: create the URL to redirect the user to for authorization.
	  - 
	  -->

	<!--	
		Plain authorization request builder, puts all options as query parameters on the GET request
	-->
	<bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />
	

	<!-- 
	 - 
	 - Utility beans for the above classes
	 -
	 -->

	<!-- 
		This service fetches and caches JWK sets from URLs.
	-->
	
	<bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />
	
	<!-- 
		This service sets up a bunch of signers and validators based on our own keys.
		Replace this keystore's contents for a production deployment.
	 -->
	<bean id="defaultSignerService" class="org.mitre.jwt.signer.service.impl.DefaultJWTSigningAndValidationService">
		<constructor-arg name="keyStore">
			<bean id="defaultKeyStore" class="org.mitre.jose.keystore.JWKSetKeyStore">
				<property name="location" value="classpath:keystore.jwks" />
			</bean>
		</constructor-arg>
		<property name="defaultSignerKeyId" value="rsa1" />
 		<property name="defaultSigningAlgorithmName" value="RS256" />
	</bean>

	<!-- 
		This service publishes the client's public key on a the endpoint "jwk" off the root of this client.
	-->	
	<bean id="clientKeyPublisher" class="org.mitre.openid.connect.client.keypublisher.ClientKeyPublisher">
 		<property name="jwkPublishUrl" value="jwk" />
 		<property name="signingAndValidationService" ref="defaultSignerService" />
 	</bean>
 		 
</beans>
